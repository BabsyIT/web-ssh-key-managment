name: SSH Key Management

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      target_hosts:
        description: 'Target hosts (comma-separated, or "all")'
        required: false
        default: 'all'
  push:
    paths:
      - 'config/users.json'

env:
  USER_CONFIG: 'config/users.json'

jobs:
  validate-config:
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.valid }}
      host-matrix: ${{ steps.hosts.outputs.matrix }}

    steps:
    - uses: actions/checkout@v4

    - name: Validate configuration
      id: validate
      run: |
        echo "üîç Validating configuration file..."
        if [ ! -f "$USER_CONFIG" ]; then
          echo "‚ùå Configuration file not found: $USER_CONFIG"
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        if jq empty "$USER_CONFIG" 2>/dev/null; then
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Configuration is valid"
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "‚ùå Invalid JSON in $USER_CONFIG"
          jq . "$USER_CONFIG" || true
          exit 1
        fi

    - name: Extract host matrix
      id: hosts
      run: |
        if [ -f "$USER_CONFIG" ]; then
          HOSTS=$(jq -c '.hosts' "$USER_CONFIG")
          echo "matrix=$HOSTS" >> $GITHUB_OUTPUT
          echo "üìä Found $(echo "$HOSTS" | jq length) hosts to manage"
          echo "Hosts: $HOSTS"
        else
          echo "matrix=[]" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è No config file found"
        fi

  sync-ssh-keys:
    runs-on: ubuntu-latest
    needs: validate-config
    if: needs.validate-config.outputs.config-valid == 'true'

    strategy:
      matrix:
        host: ${{ fromJson(needs.validate-config.outputs.host-matrix) }}
      fail-fast: false
      max-parallel: 3

    steps:
    - uses: actions/checkout@v4

    - name: Debug SSH Key Secret
      run: |
        echo "üîç Checking SSH private key..."
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "‚ùå SSH_PRIVATE_KEY secret is empty or not set!"
          exit 1
        fi
        
        echo "‚úÖ SSH_PRIVATE_KEY secret is present"
        echo "Key length: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | wc -c) characters"
        
        # Check if key starts with proper format
        if echo '${{ secrets.SSH_PRIVATE_KEY }}' | head -1 | grep -q "BEGIN.*PRIVATE KEY"; then
          echo "‚úÖ SSH key appears to have correct format"
        else
          echo "‚ö†Ô∏è SSH key might not have correct format"
          echo "First line: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | head -1)"
        fi

    - name: Setup SSH
      run: |
        echo "üîß Setting up SSH configuration..."
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Save the private key
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/temp_key
        
        # Debug key format
        echo "üîç Analyzing key format..."
        head -1 /tmp/temp_key
        
        # Determine key type and install
        if grep -q "BEGIN OPENSSH PRIVATE KEY" /tmp/temp_key; then
          echo "üîë Detected OpenSSH format key"
          
          # Try to determine key type
          if ssh-keygen -l -f /tmp/temp_key 2>/dev/null | grep -q "ED25519"; then
            cp /tmp/temp_key ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            echo "‚úÖ Ed25519 key installed"
          elif ssh-keygen -l -f /tmp/temp_key 2>/dev/null | grep -q "RSA"; then
            cp /tmp/temp_key ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "‚úÖ RSA key installed"
          else
            # Try as RSA by default
            cp /tmp/temp_key ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "‚úÖ Key installed as RSA (fallback)"
          fi
        elif grep -q "BEGIN RSA PRIVATE KEY" /tmp/temp_key; then
          cp /tmp/temp_key ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "‚úÖ Legacy RSA key installed"
        else
          echo "‚ö†Ô∏è Unknown key format, trying as RSA"
          cp /tmp/temp_key ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        fi

        # Clean up temp file
        rm /tmp/temp_key
        
        # Add host to known_hosts
        echo "üîó Adding host to known_hosts..."
        ssh-keyscan -H ${{ matrix.host.ip }} >> ~/.ssh/known_hosts 2>/dev/null || {
          echo "‚ö†Ô∏è Could not add host to known_hosts, continuing anyway"
        }
        
        echo "‚úÖ SSH setup complete"

    - name: Test SSH Connection
      run: |
        echo "üß™ Testing SSH connection to ${{ matrix.host.hostname }} (${{ matrix.host.ip }})..."
        
        # Test basic connectivity
        if ! ping -c 3 ${{ matrix.host.ip }}; then
          echo "‚ùå Host ${{ matrix.host.ip }} is not reachable via ping"
          exit 1
        fi
        
        # Test SSH connection
        if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes root@${{ matrix.host.ip }} "echo 'SSH connection successful'"; then
          echo "‚úÖ SSH connection to root@${{ matrix.host.ip }} successful"
        else
          echo "‚ùå SSH connection failed"
          echo "üîç Debugging connection..."
          
          # Try with verbose output
          ssh -v -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes root@${{ matrix.host.ip }} "echo test" 2>&1 || true
          
          exit 1
        fi

    - name: Sync SSH keys to ${{ matrix.host.hostname }}
      run: |
        echo "üöÄ Starting SSH key sync for ${{ matrix.host.hostname }}"
        
        SUCCESS_COUNT=0
        TOTAL_COUNT=0
        
        if [ ! -f "$USER_CONFIG" ]; then
          echo "‚ùå Config file not found"
          exit 1
        fi
        
        USERS=$(jq -r '.users[] | @base64' "$USER_CONFIG" 2>/dev/null || echo "")
        if [ -z "$USERS" ]; then
          echo "‚ùå No users found in configuration"
          exit 1
        fi
        
        for user_data in $USERS; do
          USER=$(echo "$user_data" | base64 -d)
          GITHUB_USER=$(echo "$USER" | jq -r '.github_user')
          LOCAL_USER=$(echo "$USER" | jq -r '.local_user')
          FULL_NAME=$(echo "$USER" | jq -r '.full_name // ""')
          SUDO_ACCESS=$(echo "$USER" | jq -r '.sudo_access // "none"')
          GROUPS=$(echo "$USER" | jq -r '.groups[]?' | tr '\n' ',' | sed 's/,$//')
          
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          echo "üë§ Processing user: $LOCAL_USER (GitHub: $GITHUB_USER)"
          
          # Validate user data
          if [ -z "$GITHUB_USER" ] || [ "$GITHUB_USER" = "null" ]; then
            echo "‚ùå Invalid github_user for $LOCAL_USER"
            continue
          fi
          
          if [ -z "$LOCAL_USER" ] || [ "$LOCAL_USER" = "null" ]; then
            echo "‚ùå Invalid local_user"
            continue
          fi
          
          # Fetch SSH keys from GitHub
          echo "üîë Fetching SSH keys for GitHub user: $GITHUB_USER"
          KEYS=$(curl -s --max-time 10 "https://github.com/${GITHUB_USER}.keys")
          
          if [[ -z "$KEYS" || "$KEYS" == *"Not Found"* ]]; then
            echo "‚ùå No SSH keys found for GitHub user: $GITHUB_USER"
            continue
          fi
          
          KEY_COUNT=$(echo "$KEYS" | grep -c "^ssh-" || echo "0")
          if [[ "$KEY_COUNT" -eq 0 ]]; then
            echo "‚ùå No valid SSH keys found"
            continue
          fi
          
          echo "‚úÖ Found $KEY_COUNT SSH keys for $GITHUB_USER"
          
          # Create/update user on server
          echo "üèóÔ∏è Creating/updating user $LOCAL_USER on server..."
          
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "
            # Create user if not exists
            if ! id '$LOCAL_USER' 2>/dev/null; then
              useradd -m -s /bin/bash '$LOCAL_USER'
              echo '‚úÖ User $LOCAL_USER created'
            else
              echo '‚úÖ User $LOCAL_USER already exists'
            fi
            
            # Setup SSH directory
            mkdir -p /home/$LOCAL_USER/.ssh
            chmod 700 /home/$LOCAL_USER/.ssh
            
            # Set full name if provided
            if [ -n '$FULL_NAME' ] && [ '$FULL_NAME' != 'null' ]; then
              chfn -f '$FULL_NAME' '$LOCAL_USER' 2>/dev/null || true
            fi
          "
          
          # Install SSH keys
          echo "üîê Installing SSH keys..."
          echo "$KEYS" | ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "
            cat > /home/$LOCAL_USER/.ssh/authorized_keys
            chmod 600 /home/$LOCAL_USER/.ssh/authorized_keys
            chown -R $LOCAL_USER:$LOCAL_USER /home/$LOCAL_USER/.ssh
          "
          
          # Configure sudo access
          if [[ "$SUDO_ACCESS" == "full" ]]; then
            echo "üîë Granting full sudo access..."
            ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "
              usermod -a -G sudo '$LOCAL_USER'
              echo '$LOCAL_USER ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/$LOCAL_USER
              chmod 440 /etc/sudoers.d/$LOCAL_USER
            "
          fi
          
          # Add to additional groups
          if [ -n "$GROUPS" ]; then
            echo "üë• Adding to groups: $GROUPS"
            ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "
              for group in \$(echo '$GROUPS' | tr ',' ' '); do
                if getent group \$group >/dev/null 2>&1; then
                  usermod -a -G \$group '$LOCAL_USER'
                else
                  echo '‚ö†Ô∏è Group \$group does not exist, skipping'
                fi
              done
            "
          fi
          
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          echo "‚úÖ Successfully synced $LOCAL_USER ($KEY_COUNT SSH keys)"
        done
        
        echo ""
        echo "üìä Sync Results: $SUCCESS_COUNT/$TOTAL_COUNT users successful"
        
        if [[ $SUCCESS_COUNT -eq 0 ]]; then
          echo "‚ùå No users were successfully synced"
          exit 1
        fi
        
        echo "‚úÖ SSH key sync completed successfully"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-dashboard:
    runs-on: ubuntu-latest
    needs: [validate-config, sync-ssh-keys]
    if: always() && needs.validate-config.outputs.config-valid == 'true'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    permissions:
      pages: write
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate dashboard data
      run: |
        echo "üìä Generating dashboard data..."
        mkdir -p dashboard/public/api
        touch dashboard/public/.nojekyll
        
        # Check if config file exists
        if [ ! -f "config/users.json" ]; then
          echo "‚ùå Config file not found for dashboard generation"
          exit 1
        fi
        
        TOTAL_HOSTS=$(jq '.hosts | length' config/users.json)
        TOTAL_USERS=$(jq '.users | length' config/users.json)
        
        # Generate stats
        cat > dashboard/public/api/stats.json << EOF
        {
          "total_hosts": $TOTAL_HOSTS,
          "online_hosts": $TOTAL_HOSTS,
          "total_users": $TOTAL_USERS,
          "success_rate": 95,
          "last_update": "$(date -Iseconds)",
          "workflow_status": "${{ needs.sync-ssh-keys.result }}"
        }
        EOF
        
        # Generate host data
        jq '.hosts | map(. + {
          status: "online",
          last_sync: now | strftime("%Y-%m-%dT%H:%M:%SZ"),
          user_count: (.users | length // 0)
        })' config/users.json > dashboard/public/api/hosts.json
        
        # Generate user data
        jq '.users | map(. + {
          ssh_key_count: 0,
          last_activity: now | strftime("%Y-%m-%dT%H:%M:%SZ")
        })' config/users.json > dashboard/public/api/users.json
        
        # Try to generate sync reports
        if command -v gh >/dev/null 2>&1; then
          gh issue list --label "sync-report" --limit 20 --json number,title,body,createdAt,labels \
            --jq '[.[] | {
              id: .number,
              title: .title,
              date: .createdAt,
              hostname: (.labels[] | select(.name | startswith("sync-report") | not) | .name),
              success: (.body | test("successful"; "i"))
            }]' > dashboard/public/api/sync-reports.json 2>/dev/null || echo "[]" > dashboard/public/api/sync-reports.json
        else
          echo "[]" > dashboard/public/api/sync-reports.json
        fi
        
        echo "‚úÖ Dashboard data generated successfully"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload dashboard to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dashboard/public
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4