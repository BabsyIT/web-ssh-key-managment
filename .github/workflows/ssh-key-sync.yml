sync-ssh-keys:
  runs-on: ubuntu-latest
  needs: validate-config
  if: needs.validate-config.outputs.config-valid == 'true'
  
  strategy:
    matrix:
      host: ${{ fromJson(needs.validate-config.outputs.host-matrix) }}
    fail-fast: false
    max-parallel: 3
  
  steps:
  - uses: actions/checkout@v4
  
  - name: Setup SSH
    run: |
      mkdir -p ~/.ssh
      
      echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/temp_key
      
      if grep -q "BEGIN OPENSSH PRIVATE KEY" /tmp/temp_key; then
        if ssh-keygen -l -f /tmp/temp_key 2>/dev/null | grep -q "ED25519"; then
          echo "üîë Detected Ed25519 key"
          cp /tmp/temp_key ~/.ssh/id_ed25519
        elif ssh-keygen -l -f /tmp/temp_key 2>/dev/null | grep -q "RSA"; then
          echo "üîë Detected RSA key"
          cp /tmp/temp_key ~/.ssh/id_rsa
        else
          echo "üîë Unknown key type, defaulting to RSA"
          cp /tmp/temp_key ~/.ssh/id_rsa
        fi
      elif grep -q "BEGIN RSA PRIVATE KEY" /tmp/temp_key; then
        echo "üîë Legacy RSA key format"
        cp /tmp/temp_key ~/.ssh/id_rsa
      else
        echo "üîë Unknown key format, defaulting to RSA"
        cp /tmp/temp_key ~/.ssh/id_rsa
      fi
      
      chmod 600 ~/.ssh/id_*
      rm /tmp/temp_key
      
      ssh-keyscan -H ${{ matrix.host.ip }} >> ~/.ssh/known_hosts 2>/dev/null || true
      
      echo "üîç Available SSH keys:"
      ls -la ~/.ssh/id_* || echo "No SSH keys found"
  
  - name: Sync SSH keys to ${{ matrix.host.hostname }}
    run: |
      echo "üîÑ Starting SSH key sync for ${{ matrix.host.hostname }}"
      
      SUCCESS_COUNT=0
      TOTAL_COUNT=0
      SYNC_LOG=""

      if [ ! -f "$USER_CONFIG" ]; then
        echo "‚ùå ERROR: Config file $USER_CONFIG not found!"
        exit 1
      fi

      USERS_CHECK=$(jq -r '.users' "$USER_CONFIG" 2>/dev/null)
      if [ "$USERS_CHECK" = "null" ] || [ -z "$USERS_CHECK" ]; then
        echo "‚ùå ERROR: No users found in config"
        exit 1
      fi

      USERS=$(jq -r '.users[] | @base64' "$USER_CONFIG" 2>/dev/null)
      if [ -z "$USERS" ]; then
        echo "‚ùå ERROR: Failed to extract users"
        exit 1
      fi

      for user_data in $USERS; do
        USER=$(echo "$user_data" | base64 -d)
        GITHUB_USER=$(echo "$USER" | jq -r '.github_user')
        LOCAL_USER=$(echo "$USER" | jq -r '.local_user')
        FULL_NAME=$(echo "$USER" | jq -r '.full_name // ""')
        SUDO_ACCESS=$(echo "$USER" | jq -r '.sudo_access // "none"')
        GROUPS=$(echo "$USER" | jq -r '.groups[]?' | tr '\n' ',' | sed 's/,$//')

        TOTAL_COUNT=$((TOTAL_COUNT + 1))
        echo "üë§ Processing: $LOCAL_USER ‚Üê $GITHUB_USER"

        if [ -z "$GITHUB_USER" ] || [ "$GITHUB_USER" = "null" ]; then
          echo "‚ùå Invalid github_user for entry $TOTAL_COUNT"
          SYNC_LOG="${SYNC_LOG}‚ùå User $TOTAL_COUNT: Invalid github_user\n"
          continue
        fi

        if [ -z "$LOCAL_USER" ] || [ "$LOCAL_USER" = "null" ]; then
          echo "‚ùå Invalid local_user for entry $TOTAL_COUNT"
          SYNC_LOG="${SYNC_LOG}‚ùå User $TOTAL_COUNT: Invalid local_user\n"
          continue
        fi

        echo "üîå Testing SSH connection to ${{ matrix.host.ip }}..."
        if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes root@${{ matrix.host.ip }} "echo 'SSH OK'" 2>/dev/null; then
          echo "‚ùå Cannot connect to ${{ matrix.host.ip }} via SSH"
          SYNC_LOG="${SYNC_LOG}‚ùå $LOCAL_USER: SSH connection failed\n"
          continue
        fi

        KEYS=$(curl -s --max-time 10 "https://github.com/${GITHUB_USER}.keys")
        if [[ -z "$KEYS" || "$KEYS" == *"Not Found"* ]]; then
          echo "‚ö†Ô∏è No SSH keys for GitHub user: $GITHUB_USER"
          SYNC_LOG="${SYNC_LOG}‚ö†Ô∏è $LOCAL_USER: No keys found\n"
          continue
        fi

        KEY_COUNT=$(echo "$KEYS" | grep -c "^ssh-" || echo "0")
        if [[ "$KEY_COUNT" -eq 0 ]]; then
          echo "‚ö†Ô∏è No valid SSH keys for $GITHUB_USER"
          SYNC_LOG="${SYNC_LOG}‚ö†Ô∏è $LOCAL_USER: No valid keys\n"
          continue
        fi

        SSH_SCRIPT="
          if ! id '$LOCAL_USER' &>/dev/null; then
            if command -v useradd >/dev/null; then
              useradd -m -s /bin/bash -c '$FULL_NAME' '$LOCAL_USER'
            elif command -v adduser >/dev/null; then
              adduser --disabled-password --gecos '$FULL_NAME' '$LOCAL_USER'
            fi
          fi
          mkdir -p /home/$LOCAL_USER/.ssh
          echo '$KEYS' > /home/$LOCAL_USER/.ssh/authorized_keys
          chmod 700 /home/$LOCAL_USER/.ssh
          chmod 600 /home/$LOCAL_USER/.ssh/authorized_keys
          chown -R $LOCAL_USER:$LOCAL_USER /home/$LOCAL_USER/.ssh
          if [[ -n '$GROUPS' ]]; then
            IFS=',' read -ra GROUP_ARRAY <<< '$GROUPS'
            for group in \"\${GROUP_ARRAY[@]}\"; do
              if getent group \"\$group\" >/dev/null; then
                usermod -a -G \"\$group\" '$LOCAL_USER'
              fi
            done
          fi
          case '$SUDO_ACCESS' in
            'full')
              echo '$LOCAL_USER ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/github-$LOCAL_USER
              chmod 440 /etc/sudoers.d/github-$LOCAL_USER
              ;;
            'none')
              rm -f /etc/sudoers.d/github-$LOCAL_USER
              ;;
          esac
        "

        if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "$SSH_SCRIPT"; then
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          echo "‚úÖ Synced $LOCAL_USER ($KEY_COUNT keys)"
          SYNC_LOG="${SYNC_LOG}‚úÖ $LOCAL_USER: $KEY_COUNT keys synced\n"
        else
          echo "‚ùå Failed to sync $LOCAL_USER"
          SYNC_LOG="${SYNC_LOG}‚ùå $LOCAL_USER: Sync failed\n"
        fi
      done

      echo "üìä Results for ${{ matrix.host.hostname }}:"
      echo -e "$SYNC_LOG"
      echo "Total users: $TOTAL_COUNT"
      echo "Successful: $SUCCESS_COUNT"

      if [[ $TOTAL_COUNT -eq 0 || $SUCCESS_COUNT -eq 0 ]]; then
        exit 1
      else
        exit 0
      fi
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
