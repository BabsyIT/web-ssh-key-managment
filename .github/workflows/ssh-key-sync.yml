- name: Sync SSH keys to ${{ matrix.host.hostname }}
      run: |
        echo "Starting SSH key sync for ${{ matrix.host.hostname }}"
        
        SUCCESS_COUNT=0
        TOTAL_COUNT=0
        SYNC_LOG=""
        
        if [ ! -f "$USER_CONFIG" ]; then
          echo "ERROR: Config file not found"
          exit 1
        fi
        
        USERS=$(jq -r '.users[] | @base64' "$USER_CONFIG" 2>/dev/null || echo "")
        if [ -z "$USERS" ]; then
          echo "ERROR: No users found"
          exit 1
        fi
        
        for user_data in $USERS; do
          USER=$(echo "$user_data" | base64 -d)
          GITHUB_USER=$(echo "$USER" | jq -r '.github_user')
          LOCAL_USER=$(echo "$USER" | jq -r '.local_user')
          FULL_NAME=$(echo "$USER" | jq -r '.full_name // ""')
          SUDO_ACCESS=$(echo "$USER" | jq -r '.sudo_access // "none"')
          GROUPS=$(echo "$USER" | jq -r '.groups[]?' | tr '\n' ',' | sed 's/,$//')
          
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          echo "Processing: $LOCAL_USER from $GITHUB_USER"
          
          if [ -z "$GITHUB_USER" ] || [ "$GITHUB_USER" = "null" ]; then
            echo "Invalid github_user"
            continue
          fi
          
          if [ -z "$LOCAL_USER" ] || [ "$LOCAL_USER" = "null" ]; then
            echo "Invalid local_user"
            continue
          fi
          
          echo "Testing SSH connection..."
          if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes root@${{ matrix.host.ip }} "echo 'OK'" 2>/dev/null; then
            echo "Cannot connect to host"
            continue
          fi
          
          KEYS=$(curl -s --max-time 10 "https://github.com/${GITHUB_USER}.keys")
          if [[ -z "$KEYS" || "$KEYS" == *"Not Found"* ]]; then
            echo "No SSH keys for $GITHUB_USER"
            continue
          fi
          
          KEY_COUNT=$(echo "$KEYS" | grep -c "^ssh-" || echo "0")
          if [[ "$KEY_COUNT" -eq 0 ]]; then
            echo "No valid SSH keys"
            continue
          fi
          
          # Create the remote script
          cat > /tmp/sync_script.sh << 'SCRIPT_EOF'
if ! id "${LOCAL_USER}" &>/dev/null; then
  if command -v useradd >/dev/null; then
    useradd -m -s /bin/bash -c "${FULL_NAME}" "${LOCAL_USER}"
  elif command -v adduser >/dev/null; then
    adduser --disabled-password --gecos "${FULL_NAME}" "${LOCAL_USER}"
  fi
fi
mkdir -p "/home/${LOCAL_USER}/.ssh"
echo "${KEYS}" > "/home/${LOCAL_USER}/.ssh/authorized_keys"
chmod 700 "/home/${LOCAL_USER}/.ssh"
chmod 600 "/home/${LOCAL_USER}/.ssh/authorized_keys"
chown -R "${LOCAL_USER}:${LOCAL_USER}" "/home/${LOCAL_USER}/.ssh"
if [[ -n "${GROUPS}" ]]; then
  IFS=',' read -ra GROUP_ARRAY <<< "${GROUPS}"
  for group in "${GROUP_ARRAY[@]}"; do
    if getent group "$group" >/dev/null; then
      usermod -a -G "$group" "${LOCAL_USER}"
    fi
  done
fi
case "${SUDO_ACCESS}" in
  'full')
    echo "${LOCAL_USER} ALL=(ALL:ALL) NOPASSWD:ALL" > "/etc/sudoers.d/github-${LOCAL_USER}"
    chmod 440 "/etc/sudoers.d/github-${LOCAL_USER}"
    ;;
  'none')
    rm -f "/etc/sudoers.d/github-${LOCAL_USER}"
    ;;
esac
SCRIPT_EOF
          
          # Execute the script with variable substitution
          if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} \
            "LOCAL_USER='$LOCAL_USER' FULL_NAME='$FULL_NAME' KEYS='$KEYS' GROUPS='$GROUPS' SUDO_ACCESS='$SUDO_ACCESS' bash -s" < /tmp/sync_script.sh; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            echo "Synced $LOCAL_USER ($KEY_COUNT keys)"
          else
            echo "Failed to sync $LOCAL_USER"
          fi
          
          rm -f /tmp/sync_script.sh
        done
        
        echo "Results: $SUCCESS_COUNT/$TOTAL_COUNT successful"
        
        if [[ $TOTAL_COUNT -eq 0 || $SUCCESS_COUNT -eq 0 ]]; then
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
