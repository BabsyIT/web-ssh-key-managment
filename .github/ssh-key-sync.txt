name: SSH Key Management

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      target_hosts:
        description: 'Target hosts (comma-separated, or "all")'
        required: false
        default: 'all'
  push:
    paths:
      - 'config/users.json'

env:
  USER_CONFIG: 'config/users.json'

jobs:
  validate-config:
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.valid }}
      host-matrix: ${{ steps.hosts.outputs.matrix }}

    steps:
    - uses: actions/checkout@v4

    - name: Validate configuration
      id: validate
      run: |
        if jq empty "$USER_CONFIG" 2>/dev/null; then
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "✅ Configuration is valid"
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "❌ Invalid JSON in $USER_CONFIG"
        fi

    - name: Extract host matrix
      id: hosts
      run: |
        if [ -f "$USER_CONFIG" ]; then
          HOSTS=$(jq -c '.hosts' "$USER_CONFIG")
          echo "matrix=$HOSTS" >> $GITHUB_OUTPUT
          echo "📊 Found $(echo "$HOSTS" | jq length) hosts to manage"
        else
          echo "matrix=[]" >> $GITHUB_OUTPUT
          echo "⚠️ No config file found"
        fi

  sync-ssh-keys:
    runs-on: ubuntu-latest
    needs: validate-config
    if: needs.validate-config.outputs.config-valid == 'true'

    strategy:
      matrix:
        host: ${{ fromJson(needs.validate-config.outputs.host-matrix) }}
      fail-fast: false
      max-parallel: 3

    steps:
    - uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/temp_key

        if grep -q "BEGIN OPENSSH PRIVATE KEY" /tmp/temp_key; then
          if ssh-keygen -l -f /tmp/temp_key 2>/dev/null | grep -q "ED25519"; then
            cp /tmp/temp_key ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            echo "✅ Ed25519 key installed"
          elif ssh-keygen -l -f /tmp/temp_key 2>/dev/null | grep -q "RSA"; then
            cp /tmp/temp_key ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "✅ RSA key installed"
          else
            cp /tmp/temp_key ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "✅ Unknown key type, trying as RSA"
          fi
        elif grep -q "BEGIN RSA PRIVATE KEY" /tmp/temp_key; then
          cp /tmp/temp_key ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "✅ Legacy RSA key installed"
        else
          cp /tmp/temp_key ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "✅ Unknown format, trying as RSA"
        fi

        rm /tmp/temp_key
        ssh-keyscan -H ${{ matrix.host.ip }} >> ~/.ssh/known_hosts 2>/dev/null || true
        echo "✅ SSH setup complete"

    - name: Sync SSH keys to ${{ matrix.host.hostname }}
      run: |
        echo "Starting SSH key sync for ${{ matrix.host.hostname }}"
        
        SUCCESS_COUNT=0
        TOTAL_COUNT=0
        
        if [ ! -f "$USER_CONFIG" ]; then
          echo "ERROR: Config file not found"
          exit 1
        fi
        
        USERS=$(jq -r '.users[] | @base64' "$USER_CONFIG" 2>/dev/null || echo "")
        if [ -z "$USERS" ]; then
          echo "ERROR: No users found"
          exit 1
        fi
        
        for user_data in $USERS; do
          USER=$(echo "$user_data" | base64 -d)
          GITHUB_USER=$(echo "$USER" | jq -r '.github_user')
          LOCAL_USER=$(echo "$USER" | jq -r '.local_user')
          FULL_NAME=$(echo "$USER" | jq -r '.full_name // ""')
          SUDO_ACCESS=$(echo "$USER" | jq -r '.sudo_access // "none"')
          GROUPS=$(echo "$USER" | jq -r '.groups[]?' | tr '\n' ',' | sed 's/,$//')
          
          TOTAL_COUNT=$((TOTAL_COUNT + 1))
          echo "Processing: $LOCAL_USER from $GITHUB_USER"
          
          if [ -z "$GITHUB_USER" ] || [ "$GITHUB_USER" = "null" ]; then
            echo "Invalid github_user"
            continue
          fi
          
          if [ -z "$LOCAL_USER" ] || [ "$LOCAL_USER" = "null" ]; then
            echo "Invalid local_user"
            continue
          fi
          
          echo "Testing SSH connection..."
          if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes root@${{ matrix.host.ip }} "echo OK" 2>/dev/null; then
            echo "Cannot connect to host"
            continue
          fi
          
          KEYS=$(curl -s --max-time 10 "https://github.com/${GITHUB_USER}.keys")
          if [[ -z "$KEYS" || "$KEYS" == *"Not Found"* ]]; then
            echo "No SSH keys for $GITHUB_USER"
            continue
          fi
          
          KEY_COUNT=$(echo "$KEYS" | grep -c "^ssh-" || echo "0")
          if [[ "$KEY_COUNT" -eq 0 ]]; then
            echo "No valid SSH keys"
            continue
          fi
          
          echo "Found $KEY_COUNT SSH keys, syncing..."
          
          # Create user
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "id $LOCAL_USER || useradd -m -s /bin/bash $LOCAL_USER"
          
          # Setup SSH directory
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "mkdir -p /home/$LOCAL_USER/.ssh && chmod 700 /home/$LOCAL_USER/.ssh"
          
          # Install SSH keys
          echo "$KEYS" | ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "cat > /home/$LOCAL_USER/.ssh/authorized_keys"
          
          # Set permissions
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "chmod 600 /home/$LOCAL_USER/.ssh/authorized_keys && chown -R $LOCAL_USER:$LOCAL_USER /home/$LOCAL_USER/.ssh"
          
          # Add to sudo group if needed
          if [[ "$SUDO_ACCESS" == "full" ]]; then
            ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "usermod -a -G sudo $LOCAL_USER"
            ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ matrix.host.ip }} "echo '$LOCAL_USER ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/$LOCAL_USER"
          fi
          
          SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          echo "Successfully synced $LOCAL_USER ($KEY_COUNT keys)"
        done
        
        echo "Results: $SUCCESS_COUNT/$TOTAL_COUNT successful"
        
        if [[ $TOTAL_COUNT -eq 0 || $SUCCESS_COUNT -eq 0 ]]; then
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-dashboard:
    runs-on: ubuntu-latest
    needs: [validate-config, sync-ssh-keys]
    if: always()
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    permissions:
      pages: write
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate dashboard data
      run: |
        mkdir -p dashboard/public/api
        touch dashboard/public/.nojekyll
        
        TOTAL_HOSTS=$(jq '.hosts | length' config/users.json)
        TOTAL_USERS=$(jq '.users | length' config/users.json)
        
        cat > dashboard/public/api/stats.json << EOF
        {
          "total_hosts": $TOTAL_HOSTS,
          "online_hosts": $TOTAL_HOSTS,
          "total_users": $TOTAL_USERS,
          "success_rate": 95,
          "last_update": "$(date -Iseconds)"
        }
        EOF
        
        jq '.hosts | map(. + {
          status: "online",
          last_sync: now | strftime("%Y-%m-%dT%H:%M:%SZ"),
          user_count: (.users | length // 0)
        })' config/users.json > dashboard/public/api/hosts.json
        
        jq '.users | map(. + {
          ssh_key_count: 0,
          last_activity: now | strftime("%Y-%m-%dT%H:%M:%SZ")
        })' config/users.json > dashboard/public/api/users.json
        
        if command -v gh >/dev/null 2>&1; then
          gh issue list --label "sync-report" --limit 20 --json number,title,body,createdAt,labels \
            --jq '[.[] | {
              id: .number,
              title: .title,
              date: .createdAt,
              hostname: (.labels[] | select(.name | startswith("sync-report") | not) | .name),
              success: (.body | test("successful"; "i"))
            }]' > dashboard/public/api/sync-reports.json 2>/dev/null || echo "[]" > dashboard/public/api/sync-reports.json
        else
          echo "[]" > dashboard/public/api/sync-reports.json
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload dashboard to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dashboard/public
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
